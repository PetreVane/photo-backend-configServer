# Server port it assigned to 0 because in this case, the app should start on a random port number
# This is useful when starting multiple instances if this microservice -> avoids port conflicts
# Assigns the port number passed as cmd line argument. If not provided, assign 0 -> generate a random port
server.port = ${PORT:0}
spring.application.name = users-ms
eureka.client.service-url.defaultZone = http://localhost:8010/eureka


# Each instance of this app needs an identifier. This is how you can add one. ${random.value} does exactly what the name says
eureka.instance.instance-id = ${spring.application.name}:${spring.application.instance_id:${random.value}}

# Actuator
management.endpoints.web.exposure.include = *

# Enables the H2 console when connecting via a gateway
spring.h2.console.enable=true
spring.h2.console.settings.web-allow-others=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Exception handling
server.error.include-stacktrace=never

# Gateway Ip address
gateway.ip = 192.168.1.135
# Security
# token expiration_time is in milliseconds and is equivalent to 10 days: 864000000
token.expiration_time = 86400000
token.secret = hfgry463hf746hf57fgdhjsdsis565gfsds8gd75fhy5739
login.url.path = /users/login
# 
#
#  Spring Api gateway properties
#
# JWT token validation
token.secret=hfgry463hf746hf57fgdhjsdsis565gfsds8gd75fhy5739
#
# These needs to be disabled
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
#
### Custom filters for routes
#
# Users-Microservice / status endpoint -> requires authorization token
spring.cloud.gateway.routes[0].id=users-status
spring.cloud.gateway.routes[0].uri=lb://users-ms
spring.cloud.gateway.routes[0].predicates[0]=Path=/users-ms/users/status
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ms/(?<segment>.*),/$\{segment}
spring.cloud.gateway.routes[0].filters[2]=AuthorizationFilter
#
# Users-Microservice / create endpoint
spring.cloud.gateway.routes[1].id=users-add
spring.cloud.gateway.routes[1].uri=lb://users-ms
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ms/users/add
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-ms/(?<segment>.*),/$\{segment}
#
# Users-Microservice / login endpoint
spring.cloud.gateway.routes[2].id=users-login
spring.cloud.gateway.routes[2].uri=lb://users-ms
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-ms/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/users-ms/(?<segment>.*),/$\{segment}
#
# Users-Microservice / get/update/delete endpoints -> require authorization token
spring.cloud.gateway.routes[3].id=users-get-update-delete
spring.cloud.gateway.routes[3].uri=lb://users-ms
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-ms/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET, PUT, DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=RewritePath=/users-ms/(?<segment>.*),/$\{segment}
spring.cloud.gateway.routes[3].filters[2]=AuthorizationFilter
